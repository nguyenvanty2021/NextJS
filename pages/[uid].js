import Head from "next/head";
// Trường hợp: static html generation (không dùng getStaticProps, getStaticPaths, getServerSideProps trong component)
// -> thì khi npm run build or yarn build sau đó start thì nó sẽ tự động chuyển trang của mình thành file .html, khi user request thì nó đã tạo sẵn file .html, chỉ hiển thị ra mà thôi
// Trường hợp: static html + json data (dùng getStaticProps)
// Trường hợp: static html + json data + dynamic routes (dùng getStaticProps + getStaticPaths)
// Chỉ sử dụng getStaticProps + getStaticPath (2 thằng này là SSG) hoặc getServerSideProps () -> không dùng chung
// có staticProps và staticPath thì không có serverSideProp và ngược lại.
// chỉ sử dụng được 3 hàm này trong page (những component nằm trong folder pages), còn những component 
// chia nhỏ nằm ngoài folder pages thì k dùng dc, chính vì vậy người ta thường sử dụng trong page rồi 
// truyền data vào các component con, 
// 3 hàm trên ở server-side (chỉ chạy ở phía server, client có console.log cũng không thấy) và chỉ chạy lúc build-time (khi npm run build or yarn build)
// trong môi trường dev thì chỉ cần gủi request thì nó luôn luôn chạy 3 hàm này
const UserID = (props) => {
  // hàm getServerSideProps sẽ tự động được gọi lại mỗi khi refresh,
  //   const router = useRouter()
  //   useEffect(() => {
  //       const interVal = setInterval(() => {
  //           router.replace(router.asPath)
  //       }, 3000)
  //       return () => clearInterval(interVal)
  //   }, [])
  // Nếu chưa rõ thì mình giải thích chỗ router.replace() thôi, hàm này có nhiệm vụ refresh
  // lại thay vì F5 nhé, lưu ý không dùng router.reload() thì nó sẽ F5 lại page.
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="title" content="" />
        <meta property="fb:app_id" content="" />
        <meta property="twitter:url" content="" />
        <meta property="og:type" content="" />
        <meta property="og:site_name" content="" />
        <meta property="og:locale" content="" />
        <meta property="og:title" content="" />
        <meta property="og:description" content="" />
        <meta property="og:image" content="" />
        <meta property="og:image:secure" content="" />
        <meta name="og:url" content="" />
      </Head>
      <h1>{props.id}</h1>
    </div>
  );
};
// thường dùng call API thay cho useEffect, tốt cho SEO
// getServerSideProps nên được sử dụng để xây dựng ứng dụng đảm bảo dữ liệu được cập nhật liên tục
// mà không cần phải refresh trang. Ví dụ dữ liệu chứng khoán, dữ liệu tình hình Covid,…
// Nếu trang sử dụng Server-side rendering HTML sẽ được tạo khi có request. Sau mỗi request NextJS sẽ
//  tự động gọi hàm getServerSideProps trong page.
// hàm này có thể lấy được params trên url luôn
// mỗi lần client gửi request lên server thì hàm này sẽ được gọi, nó sẽ fetch lại api
// những component nào có getServerSideProps khi build thì component đó sẽ ở dạng .js, còn component không có
// hàm getServerSideProps thì khi build sẽ ở dạng .html, 
// khi sử dụng getServerSideProps nó sẽ xử lý ở server và truyền kết quả cho client render ra UI thôi (client chỉ render 1 lần)
export async function getServerSideProps(context) {
  //   const res = await fetch(`https://...`);
  //   const data = await res.json();
  //   if (!data) {
  //     return {
  //       notFound: true,
  //     };
  //   }
  //   return {
  //     props: {}, // will be passed to the page component as props
  //   };
  // hoặc
  // Fetch data from external API
  // const res = await fetch(`https://.../data`);
  // const data = await res.json();

  // Pass data to the page via props
  // return { props: { data } };

  const { params } = context;
  const userId = params.uid;
  return {
    props: {
      id: "userID-" + userId,
    },
  };
}
export default UserID;
