import React from "react";
import fs from "fs/promises";
import Head from "next/head";
import { GetStaticProps, GetStaticPaths, GetStaticPropsContext } from "next";
import path from "path";
// Trường hợp: static html generation (không dùng getStaticProps, getStaticPaths, getServerSideProps trong component)
// -> thì khi npm run build or yarn build sau đó start thì nó sẽ tự động chuyển trang của mình thành file .html, khi user request thì nó đã tạo sẵn file .html, chỉ hiển thị ra mà thôi
// Trường hợp: static html + json data (dùng getStaticProps)
// Trường hợp: static html + json data + dynamic routes (dùng getStaticProps + getStaticPaths)
// Chỉ sử dụng getStaticProps + getStaticPath (2 thằng này là SSG) hoặc getServerSideProps () -> không dùng chung
// có staticProps và staticPath thì không có serverSideProp và ngược lại.
// chỉ sử dụng được 3 hàm này trong page (những component nằm trong folder pages), còn những component
// chia nhỏ nằm ngoài folder pages thì k dùng dc, chính vì vậy người ta thường sử dụng trong page rồi
// truyền data vào các component con,
// 3 hàm trên ở server-side (chỉ chạy ở phía server, client có console.log cũng không thấy) và chỉ chạy lúc build-time (khi npm run build or yarn build)
// trong môi trường dev thì chỉ cần gủi request thì nó luôn luôn chạy 3 hàm này
const ProductDetails = ({ object }) => {
  // const { object } = prop;
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="title" content="" />
        <meta property="fb:app_id" content="" />
        <meta property="twitter:url" content="" />
        <meta property="og:type" content="" />
        <meta property="og:site_name" content="" />
        <meta property="og:locale" content="" />
        <meta property="og:title" content="" />
        <meta property="og:description" content="" />
        <meta property="og:image" content="" />
        <meta property="og:image:secure" content="" />
        <meta name="og:url" content="" />
      </Head>
      <h1>Title</h1>
      <div>{object.title}</div>
      <p>Description</p>
    </div>
  );
};
// func này sẽ luôn luôn trả về 1 obj
// ngoài ra hàm này còn giúp check những params không tồn tại trên url sẽ được đẩy qua page 404
// VD: user nhập bừa 1 params: local/dasdajdasd/dasda -> lúc này params không tồn tại hay không có page động nào tồn tại thì sẽ đẩy qua page 404
export async function getStaticPaths() {
  // có api thì call api
  // const res = await fetch('https://.../posts');
  // const posts = await res.json();
  // không có api thì đọc filesystem
  const filePath = path.join(process.cwd(), "dummy", "data.json");
  const jsonData = await fs.readFile(filePath);
  const data = JSON.parse(jsonData);
  const paths = data.products.map((values) => {
    return {
      // nếu chỗ này mình truyền vào 3 obj tương ứng với 3 id là: "1", "2", "3" thì thằng
      // getStaticProps sẽ chạy hay nói cách khác là được gọi 3 lần nhưng thằng getStaticPaths
      // này chỉ chạy hay được gọi 1 lần mà thôi. Tuỳ vào bao nhiêu obj thì getStaticProps sẽ được gọi và chạy bấy nhiêu lần
      // và sau khi npm run build or yarn build thì nó sẽ tạo ra 4 file .html và .json tương ứng với 3 id (3 obj)
      // chỗ này là id vì params dynamic là [id]
      params: { id: values.id },
    };
  });
  return {
    // paths: [
    // nếu chỗ này mình truyền vào 3 obj tương ứng với 3 id là: "1", "2", "3" thì thằng
    // getStaticProps sẽ chạy hay nói cách khác là được gọi 3 lần nhưng thằng getStaticPaths
    // này chỉ chạy hay được gọi 1 lần mà thôi. Tuỳ vào bao nhiêu obj thì getStaticProps sẽ được gọi và chạy bấy nhiêu lần
    // và sau khi npm run build or yarn build thì nó sẽ tạo ra 4 file .html và .json tương ứng với 3 id (3 obj)
    // chỗ này là id vì params dynamic là [id]
    //   { params: { id: "1" } },
    //   { params: { id: "2" } },
    //   { params: { id: "3" } },
    // ],
    paths,
    fallback: false, // những id không tồn tại (không có) trong các obj sẽ đẩy qua page 404
  };
}
export async function getStaticProps(context) {
  // nếu chỗ này mình truyền vào 3 obj tương ứng với 3 id là: "1", "2", "3" thì thằng
  // getStaticProps sẽ chạy hay nói cách khác là được gọi 3 lần nhưng thằng getStaticPaths
  // này chỉ chạy hay được gọi 1 lần mà thôi. Tuỳ vào bao nhiêu obj thì getStaticProps sẽ được gọi và chạy bấy nhiêu lần
  // và sau khi npm run build or yarn build thì nó sẽ tạo ra 4 file .html và .json tương ứng với 3 id (3 obj)
  const { id } = context.params; // này là id
  if (!id) {
    return { notFound: true }; // id không tồn tại, rỗng thì đẩy nó sang page 404.
  }
  // trường hợp có api
  // bỏ id vào api
  // const props = fetch(`/api/${id}`)
  // return {props}
  // trường hợp dùng data system
  const filePath = path.join(process.cwd(), "dummy", "data.json");
  const jsonData = await fs.readFile(filePath);
  const data = JSON.parse(jsonData);
  const product = data.products.find((product) => product.id === id);
  // obj không tồn tại, rỗng thì đẩy nó sang page 404.
  if (!product) {
    return { notFound: true }; // obj không tồn tại, rỗng thì đẩy nó sang page 404.
  }
  return {
    props: {
      object: product,
    },
  };
  // trường hợp array nhiều thuộc tính quá mà client chỉ cần vài thuộc tính để render thôi,
  // thì mình sẽ dùng hàm map để tạo ra 1 mảng mới
  // return {
  //   props: {
  //     object: product.map((x) => ({id: x.id, title: x.title})),
  //   },
  // }
}
export default ProductDetails;
